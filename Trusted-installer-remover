#!/bin/bash
# This script removes the TrustedInstaller user from the system.
# It is intended for use on Windows systems and should be run with administrative privileges.
# it also supports android and linux systems
# Usage: ./trusted_installer_remover.sh

set -Ae -o pipefail

# Sudo configuration and superuser privilege management
echo "Configuring sudo access and obtaining superuser privileges..."

# Check if sudo is available
if ! command -v sudo >/dev/null 2>&1; then
    echo "Warning: sudo command not found. Running in direct root mode."
    SUDO_CMD=""
else
    SUDO_CMD="sudo"
    echo "sudo command found at: $(command -v sudo)"
fi

# Function to obtain superuser privileges
obtain_superuser() {
    if [ "$EUID" -eq 0 ]; then
        echo "Already running as root (UID: $EUID)"
        return 0
    fi
    
    if [ -n "$SUDO_CMD" ]; then
        echo "Attempting to obtain superuser privileges with sudo..."
        # Test sudo access without password prompt first
        if $SUDO_CMD -n true 2>/dev/null; then
            echo "Sudo access granted (cached credentials)"
            return 0
        else
            echo "Requesting sudo password..."
            if $SUDO_CMD -v; then
                echo "Sudo privileges obtained successfully"
                return 0
            else
                echo "Failed to obtain sudo privileges"
                return 1
            fi
        fi
    else
        echo "No sudo available and not running as root"
        return 1
    fi
}

# Check if running as root or obtain superuser privileges
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root. Please use sudo or run as an administrator."
    echo "Attempting to run with sudo..."
    
    # Try to obtain superuser privileges
    if obtain_superuser; then
        echo "Re-executing script with elevated privileges..."
        exec sudo "$0" "$@"
    else
        echo "Failed to obtain superuser privileges. Exiting..."
        exit 1
    fi
    exit 1
fi

echo "Running as root. Proceeding with removal of TrustedInstaller."

# Check if the script is run on a supported operating system
if [[ "$OSTYPE" != "cygwin" && "$OSTYPE" != "msys" && "$OSTYPE" != "win32" && "$OSTYPE" != "android" && "$OSTYPE" != "linux-gnu"* ]]; then
    echo "Unsupported operating system: $OSTYPE. This script only supports Windows, Android, and Linux."
    echo "Exiting..."
    exit 1
fi

# Function to remove TrustedInstaller on Windows
remove_trusted_installer_windows() {
    echo "Removing TrustedInstaller on Windows..."
    powershell -Command "Remove-LocalUser -Name 'TrustedInstaller' -ErrorAction Continue"
    if [ $? -eq 0 ]; then
        echo "TrustedInstaller has been successfully removed."
    else
        echo "Failed to remove TrustedInstaller. It may not exist or you may not have the necessary permissions."
    fi
}

# Function to remove TrustedInstaller on Android
remove_trusted_installer_android() {
    echo "Removing TrustedInstaller on Android..."
    adb shell "pm uninstall com.android.trustedinstaller"
    if [ $? -eq 0 ]; then
        echo "TrustedInstaller has been successfully removed from Android."
    else
        echo "Failed to remove TrustedInstaller from Android. It may not exist or you may not have the necessary permissions."
    fi
}

# Function to remove TrustedInstaller on Linux
remove_trusted_installer_linux() {
    echo "Removing TrustedInstaller on Linux..."
    userdel -r trustedinstaller
    if [ $? -eq 0 ]; then
        echo "TrustedInstaller has been successfully removed from Linux."
    else
        echo "Failed to remove TrustedInstaller from Linux. It may not exist or you may not have the necessary permissions."
    fi
}

# Main script execution based on OS type
if [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo "Detected Windows operating system."
    echo "Proceeding with removal of TrustedInstaller on Windows..."
    remove_trusted_installer_windows
elif [[ "$OSTYPE" == "android" || "$OSTYPE" == "linux-android"* ]]; then
    echo "Detected Android operating system."
    echo "Proceeding with removal of TrustedInstaller on Android..."
    adb root
    adb wait-for-device
    remove_trusted_installer_android
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "Detected Linux operating system."
    echo "Proceeding with removal of TrustedInstaller on Linux..."
    remove_trusted_installer_linux
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "This script is not designed for macOS."
    exit 1
else
    echo "Unsupported operating system: $OSTYPE."
    exit 1
fi

# Summary and warnings
echo ""
echo "Summary of actions taken:"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "- TrustedInstaller user removal attempted on Linux."
elif [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo "- TrustedInstaller user removal attempted on Windows."
elif [[ "$OSTYPE" == "android" || "$OSTYPE" == "linux-android"* ]]; then
    echo "- TrustedInstaller uninstall attempted on Android."
fi

echo ""
echo "WARNING: Removing the TrustedInstaller user may cause serious system issues."
echo "This script might lock you out of many system files and folders."
echo "It is recommended to create a system backup before proceeding."
echo "USE AT YOUR OWN RISK!"

echo ""
echo "Script execution completed."
exit 0